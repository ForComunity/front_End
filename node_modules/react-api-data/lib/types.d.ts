import { ActionCreator, Dispatch } from 'redux';
import { ApiDataState } from './reducer';
import { BindingsStore } from './helpers/createApiDataBinding';
import { StringifyOptions } from 'query-string';
export declare type NetworkStatus = 'ready' | 'loading' | 'failed' | 'success';
export declare type NormalizeResult = string | number | Array<string | number>;
export interface NormalizedData {
    entities: {
        [type: string]: {
            [id: string]: any;
        };
    };
    result: NormalizeResult;
}
/**
 * Map parameter names to values.
 */
export interface EndpointParams {
    [paramName: string]: string | number | string[] | number[];
}
/**
 * Information about a request made to an endpoint.
 */
export interface ApiDataRequest {
    result?: any;
    networkStatus: NetworkStatus;
    lastCall: number;
    duration: number;
    response?: Response;
    errorBody?: any;
    endpointKey: string;
    params?: EndpointParams;
    url: string;
}
export interface ApiDataGlobalConfig {
    setHeaders?: (defaultHeaders: any, state: any) => any;
    setRequestProperties?: (defaultProperties: object, state: object) => object;
    beforeSuccess?: (handledResponse: {
        response: Response;
        body: any;
    }, beforeProps: ApiDataConfigBeforeProps) => {
        response: Response;
        body: any;
    };
    afterSuccess?: (afterProps: ApiDataConfigAfterProps) => void;
    beforeFailed?: (handledResponse: {
        response: Response;
        body: any;
    }, beforeProps: ApiDataConfigBeforeProps) => {
        response: Response;
        body: any;
    };
    afterFailed?: (afterProps: ApiDataConfigAfterProps) => void;
    timeout?: number;
    autoTrigger?: boolean;
}
/**
 * Specification and configuration of an endpoint.
 */
export declare type Method = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';
export interface ApiDataEndpointConfig {
    url: string;
    method: Method;
    cacheDuration?: number;
    responseSchema?: any;
    queryStringOpts?: StringifyOptions;
    transformResponseBody?: (responseBody: any) => NormalizedData;
    handleErrorResponse?: (responseBody: any, params: EndpointParams, requestBody: any, dispatch: ActionCreator<any>, getState: () => {
        apiData: ApiDataState;
    }, response?: Response) => boolean | void;
    beforeFailed?: (handledResponse: {
        response: Response;
        body: any;
    }, beforeProps: ApiDataConfigBeforeProps) => {
        response: Response;
        body: any;
    };
    afterFailed?: (afterProps: ApiDataConfigAfterProps) => boolean | void;
    beforeSuccess?: (handledResponse: {
        response: Response;
        body: any;
    }, beforeProps: ApiDataConfigBeforeProps) => {
        response: Response;
        body: any;
    };
    afterSuccess?: (afterProps: ApiDataConfigAfterProps) => boolean | void;
    setHeaders?: (defaultHeaders: object, state: object) => object;
    setRequestProperties?: (defaultProperties: object, state: object) => object;
    timeout?: number;
    autoTrigger?: boolean;
}
export interface ApiDataConfigBeforeProps {
    endpointKey: string;
    request: ApiDataRequest;
    requestBody?: any;
}
export interface ApiDataConfigAfterProps {
    endpointKey: string;
    request: ApiDataRequest;
    requestBody?: any;
    resultData: any;
    actions: Actions;
    dispatch: Dispatch;
    getState: () => any;
}
/**
 * The value that withApiData binds to the property of your component.
 * @example
 * type Props = {
 *   users: ApiDataBinding<Array<User>>
 * }
 */
export interface ApiDataBinding<T> {
    data?: T;
    request: ApiDataRequest;
    perform: (params?: EndpointParams, body?: any) => Promise<ApiDataBinding<T>>;
    invalidateCache: () => void;
    getInstance: (instanceId: string) => ApiDataBinding<T>;
}
export interface Actions {
    invalidateCache: (endpointKey: string, params?: EndpointParams, instanceId?: string) => void;
    perform: (endpointKey: string, params?: EndpointParams, body?: any, instanceId?: string, bindingsStore?: BindingsStore) => Promise<ApiDataBinding<any>>;
    purgeAll: () => void;
}
